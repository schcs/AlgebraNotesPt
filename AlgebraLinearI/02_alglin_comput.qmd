---
title: "Computações com Python II"
number-sections: true
lang: pt-BR
jupyter: python3
--- 

Vamos resolver alguns problemas numéricos usando as bibliotecas [SymPy](https://www.sympy.org/) e 
[NumPy](https://www.sympy.org/) da linguagem de programação [Python](https://www.python.org/).

Primeiro vamos carregar as funções que vamos utilizar da biblioteca.

```python
from sympy import Matrix
```
  
## Grafos e matrizes

Um **grafo** é uma coleção de vértices ligados com arrestas. Por exemplo, 

![Exemplo de um grafo](img/6n-graf.png)

é um grafo. A **matriz de adjecência** de um grafo $\Gamma$ é a matriz cujas linhas e colunas estão indexadas pelos vértices do grafo e a entrada na $i$-ésima linha e $j$-ésima coluna é $1$ se $v_i$ e $v_j$ são adjacentes; caso contrário, a entrada é nula. Por exemplo, a matriz da adjacência do grafo $\Gamma$ na imagem é a matriz 
$$
A(\Gamma)=\begin{pmatrix} 0 & 1 & 0 & 0 & 1 & 0 \\ 
                1 & 0 & 1 & 0 & 1 & 0 \\
                0 & 1 & 0 & 1 & 0 & 0 \\
                0 & 0 & 1 & 0 & 1 & 1 \\
                1 & 1 & 0 & 1 & 0 & 0 \\
                0 & 0 & 0 & 1 & 0 & 0
\end{pmatrix}.
$$
A **matriz de grau** de um grafo é a matriz diagonal $n\times n$ que contém o grau dos vértices (ou seja, o número de vizinhos) nas entradas diagonais. A matriz de grau do grafo $\Gamma$ em cima é 
$$
G(\Gamma)=\begin{pmatrix} 2 & 0 & 0 & 0 & 0 & 0 \\ 
                0 & 3 & 0 & 0 & 0 & 0 \\
                0 & 0 & 2 & 0 & 0 & 0 \\
                0 & 0 & 0 & 3 & 0 & 0 \\
                0 & 0 & 0 & 0 & 3 & 0 \\
                0 & 0 & 0 & 0 & 0 & 1
\end{pmatrix}.
$$
A laplaciana de um grafo $\Gamma$ é a matriz $G(\Gamma)-A(\Gamma)$. A laplaciana do grafo na imagem é 
$$
A(\Gamma)=\begin{pmatrix} 2 & -1 & 0 & 0 & -1 & 0 \\ 
                -1 & 3 & -1 & 0 & -1 & 0 \\
                0 & -1 & 2 & -1 & 0 & 0 \\
                0 & 0 & -1 & 3 & -1 & -1 \\
                -1 & -1 & 0 & -1 & 3 & 0 \\
                0 & 0 & 0 & -1 & 0 & 1
\end{pmatrix}.
$$

:::{#exm-grafos}
Escreva uma função em Python para calcular as matrizes de adjacência, grau e laplaciana de um grafo. Assuma que o grafo está dado como uma 
lista de arrestas na forma `(i,j)` indicando que $v_i$ e $v_j$ são adjacentes. Por exemplo o grafo na imagem pode ser definido com a lista 
```python
edge_list = [(0,1),(0,4),(1,2),(1,4),(2,3),(3,4),(3,5)]
```
As funções podem aceitar um argumento adicional indicando o número de vértices do grafo; alternativamente, este número pode ser calculado também usando a lista de arrestas. 

A sua função deve funcinar na maneira seguinte. 

```python
In [9]: edge_list = [(0,1),(0,4),(1,2),(1,4),(2,3),(3,4),(3,5)]
In [10]: adjacency_matrix( 6, edge_list )
Out[10]: 
Matrix([
[0, 1, 0, 0, 1, 0],
[1, 0, 1, 0, 1, 0],
[0, 1, 0, 1, 0, 0],
[0, 0, 1, 0, 1, 1],
[1, 1, 0, 1, 0, 0],
[0, 0, 0, 1, 0, 0]])

In [11]: degree_matrix( 6, edge_list )
Out[11]: 
Matrix([
[2, 0, 0, 0, 0, 0],
[0, 3, 0, 0, 0, 0],
[0, 0, 2, 0, 0, 0],
[0, 0, 0, 3, 0, 0],
[0, 0, 0, 0, 3, 0],
[0, 0, 0, 0, 0, 1]])

In [12]: laplacian( 6, edge_list )
Out[12]: 
Matrix([
[ 2, -1,  0,  0, -1,  0],
[-1,  3, -1,  0, -1,  0],
[ 0, -1,  2, -1,  0,  0],
[ 0,  0, -1,  3, -1, -1],
[-1, -1,  0, -1,  3,  0],
[ 0,  0,  0, -1,  0,  1]])
```
<!--
In [1]: def adjacency_matrix( n, edge_list ):
   ...:     mat = Matrix.zeros( n, n )
   ...:     for e in edge_list:
   ...:         mat[e[0],e[1]] = mat[e[1],e[0]] = 1
   ...: 
   ...:     return mat
   ...: 
   ...: def laplacian( n, edge_list ):
   ...:     mat = adjacency_matrix( n, edge_list )
   ...:     lap_mat = mat.copy()
   ...:     n = mat.rows
   ...:     for i in range( n ):
   ...:         lap_mat[i,i] = -sum( mat[i,:] )
   ...:     return -lap_mat
   ...: 
   ...: def degree_matrix( n, edge_list ):
   ...:     mat = adjacency_matrix( n, edge_list )
   ...:     n = mat.rows
   ...:     deg_mat = Matrix.zeros( n, n )
   ...:     for i in range( n ):
   ...:         deg_mat[i,i] = sum( mat[i,:] 
            retuen deg_mat
-->

DICA: Para construir a matriz de adjacência pode começar por construir uma matriz nula, usando a função `Matrix.zeros`. Depois use um laço `for`
correndo sobre os elementos da lista de arrestas. Para construir a matriz de grau, pode começar por construir a matriz de adjacência e 
usar `sum( m[i,:])` para calcular a soma da $i$-ésima linha.
:::

:::{#exm-grafo}
Construe as matrizes de adjacência dos grafos dados com as seguintes listas de arrestas. 
:::
