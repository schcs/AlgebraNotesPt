---
number-sections: true
lang: pt-BR
format: pdf
execute:
    echo: false
--- 

# Prova computacional (Álgebra Linear I)

Nomes dos alunos:

- Aluno 1:
  
  \bigskip

- Aluno 2:

```{python}
import random
import string

def generate_random_string(length=8):
    letters = string.ascii_letters  # Contains both lowercase and uppercase letters
    return ''.join(random.choice(letters) for _ in range(length))

# Example usage
random_string = generate_random_string()
print(f"Código da prova: {random_string}")
print(f"As matrizes necessárias para a prova encontram-se no url\ngithub.com/schcs/\nAlgebraNotesPt/tree/main/AlgebraLinearI/ProvaComput/{random_string}_matrices.txt")
```

Sejam $W_1$ e $W_2$ os subespaços de $\mathbb R^{20}$ gerados pelas linhas das matrizes $M_1$ e $M_2$ que encontram-se no arquivo acima indicado.

```{python}
from numpy.random import permutation
from numpy import array
from sympy import Matrix, zeros
from random import randint
def produce_random_mat( nrows, ncols, init_mat = Matrix( [] )):
    
    mat = init_mat
    
    for i in range( nrows - init_mat.rows ): 
        if mat.rows == 0 or randint( 0, 1 ) == 0:
            mat = mat.row_insert( mat.rows, Matrix( [[ randint( -2, 2 ) for _ in range( ncols ) ]]))
        else:
            c_lin = Matrix( [[ randint( -2, 2 ) for _ in range( mat.rows ) ]] )
            mat = mat.row_insert( mat.rows, c_lin*mat )
    
    return mat

common_rows = randint( 1, 3 )
init_mat = Matrix( [[ randint( -2, 2 ) for _ in range( 20 ) ] for _ in range( common_rows )] )

M1 = produce_random_mat( 8, 20, init_mat = init_mat )
M2 = produce_random_mat( 8, 20, init_mat = init_mat )
M1[0,:] = M1[1,:] + M1[6,:]
M1[1,:] = M1[1,:] + M1[5,:]
M1[2,:] = M1[2,:] + M1[7,:]

mat_file = open( random_string+"_matrices.txt", 'w' )
mat_file.write( "M1="+str(M1)+"\n\n"+"M2="+str(M2) )
mat_file.close()
```

```{python}
def ache_base( M ):
    
    # achar número de linhas e colunas em M
    rows, cols = M.shape
    
    # a lista vai conter a base
    # e a matriz que vai conter a forma esc reduzida
    ind_bas, bas_esc = [], Matrix( [] )
        
    for i in range( rows ):
        
        # adicione a linha i de M a forma escalonada
        bas_esc = bas_esc.row_insert( bas_esc.rows, M[i,:] )
        
        # faça escalonamento 
        bas_esc, _ = bas_esc.rref()
        
        # se a última linha é nula, pode deletar e 
        # neste case esta linha não está na base 
        if bas_esc.row(-1) == zeros( 1, cols ):
            bas_esc.row_del( bas_esc.rows-1 )
        else: 
            # se a última linha é não nula, adiciona índice i à base
            ind_bas.append( i )
    # devolva a forma escalonada e a base        
    return bas_esc, ind_bas
```

```{python}
# produce the answers 
w1_dim = M1.rank()
w2_dim = M2.rank()
M1_rref, _ = M1.rref()

M = M1.col_join( M2 )
w_dim = M.rank()
M_rref, _ = M.rref()
res_file = open( random_string+"_answers.txt", "w" )
res_file.write( "dim W1 = "+str(w1_dim)+"\n")
res_file.write( "dim W2 = "+str(w2_dim)+"\n")
res_file.write( "basis of W1 = "+str(ache_base(M1)[1])+"\n")
res_file.write( "(3,20)-entry = "+str(M1_rref[2,19])+"\n")
res_file.write( "dim W  = "+str(M.rank())+"\n")
res_file.write( "dim W1 meet W2 = "+str(w1_dim+w2_dim-w_dim)+"\n")
res_file.write( "(5,20)-entry = "+str(M_rref[4,19])+"\n")

X1 = M1.row_join( M1 )
X2 = M2.row_join( zeros( M2.rows, M1.cols ))
X = X1.col_join( X2 )
X0, _ = X.rref()
B_int = X0[w_dim,range(20,40)]

res_file.write( "first line of intersection = "+str( B_int ))
res_file.close()
```



Responda às seguintes perguntas. 

- Determine $\dim W_1$ e $\dim W_2$.

\vskip 1.5cm 

- Determine quais linhas de $M_1$ formam uma base de $W_1$. Liste os índices dessas linhas.

\vskip 1.5cm

- Seja $Y$ a matriz cujas linhas formam a base na forma escalonada reduzida de $W_1$. Determine a entrada de $Y$ na interseção da terceira linha e vigésima coluna.

\vskip 1.5cm 

- Determine $\dim(W_1 + W_2)$ e $\dim(W_1 \cap W_2)$.

\vskip 1.5cm 

- Determine a matriz na forma escalonada reduzida cujas linhas formam uma base de $W_1 + W_2$. Informe a entrada na interseção da quinta linha e vigésima coluna. 

\vskip 1.5cm 

- Usando o Algoritmo de Zassenhaus, determine uma base de $W_1 \cap W_2$ na forma escalonada reduzida. Informe o primeiro vetor desta base.

